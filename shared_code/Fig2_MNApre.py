# -*- coding: utf-8 -*-
# @Time :2023/6/8 15:23
# @Auther :Yuwenchao
# @Software : PyCharm
'''
Dividing the MNA results
based on the thresholds (MPC ranging from 3 to 6; MS2 similarity ranging from 0.1-0.9)
input: MS1 and MS2 comparison results generated by MNA
Output folder/files used for fig2D
'''
import os
import time

import numpy as np
import pandas as pd

from tqdm import tqdm,trange
from collections import Counter
if __name__ == '__main__':
    t = time.time()

    '''edb_file'''
    mq_file = '/data/edbMS1match_std_quant.csv'
    mq_df = pd.read_csv(mq_file)
    type = 'max_pp' # 'max_sim'
    threshold = 0.9
    mps = 3

    index_to_keep=[]
    mq_df_filtered = mq_df[(mq_df['pp'] > threshold) & (mq_df['mps'] > mps)]
    # mq_df_filtered = mq_df[(mq_df['pair_similarity']>=threshold) & (mq_df['mps']>=mps)]
    scans = list(Counter(mq_df_filtered['row ID']))
    for i in tqdm(scans, total = len(scans)):
        slice_df = mq_df_filtered[mq_df['row ID']==i]
        max_index = slice_df['pp'].idxmax() # max_index = slice_df['pair_similarity'].idxmax()
        if not np.isnan(max_index):
            index_to_keep.append(max_index)

    df_filtered = mq_df.loc[index_to_keep].reset_index(drop=True)
    df_filtered.to_csv(f'{mq_file}_{type}_{threshold}_{mps}.csv',index=None)

    '''isdb_file'''
    np_file = 'npMS1match_std_quant.csv'

    np_df = pd.read_csv(np_file)
    print(np_df.columns)
    types = 'max_pp' # types = 'max_sim'
    thresholds = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
    mps = 5

    np_df[type] = np.nan
    np_df['max_mps'] = np.nan

    for j in trange(len(np_df)):
        pairs = [
            (np_df.loc[j, 'mps0'], np_df.loc[j, 'pair_similarity0'], np_df.loc[j, 'pp0']),
            (np_df.loc[j, 'mps1'], np_df.loc[j, 'pair_similarity1'], np_df.loc[j, 'pp1']),
            (np_df.loc[j, 'mps2'], np_df.loc[j, 'pair_similarity2'], np_df.loc[j, 'pp2'])
        ]

        # Find the (mps, pairsimilarity) pair with the maximum pairsimilarity value
        max_pair = max(pairs, key=lambda x: x[2]) # [0] mps [1] pair_similarity [2] pp
        # Retrieve the maximum mps and pair_similarity values
        np_df.loc[j, 'max_mps'] = max_pair[0]
        np_df.loc[j, type] = max_pair[2]

    index_to_keep=[]
    np_df_filtered = np_df[(np_df[type]>=threshold) & (np_df['max_mps']>=mps) ]
    scans = list(Counter(np_df_filtered['row ID']))
    for i in tqdm(scans, total = len(scans)):
        slice_df = np_df_filtered[np_df['row ID']==i]
        max_index = slice_df[type].idxmax()
        if not np.isnan(max_index):
            index_to_keep.append(max_index)

    df_filtered = np_df.loc[index_to_keep].reset_index(drop=True)
    df_filtered.to_csv(f'{np_file}_{type}_{threshold}_{mps}.csv',index=None)

    print(f'Finished in {(time.time() - t) / 60:.2f} min')
